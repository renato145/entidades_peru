{"version":3,"sources":["atoms/data.ts","atoms/map.ts","atoms/plotSettings.ts","components/Departamento.tsx","components/ColorLegend.tsx","components/Map.tsx","components/DetailsView.tsx","components/PlotSettings.tsx","components/DataTable.tsx","components/DataSourcesInfo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["populationDataAtom","atom","a","csv","row","total","csvData","data","Map","totalPopulation","forEach","departamento","set","getSummary","entries","rollups","o","length","poder","sort","b","descending","sum","map","max","dataAtom","densityMul","dataSummaryAtom","get","populationData","dataList","d","population","density","dataSummaryAllAtom","geodataAtom","json","then","topology","feature","mapSelectionAtom","selectedDataAtom","selection","undefined","name","colorVarAtom","maxColorVarAtom","colorVar","maxCount","values","Departamento","path","scale","useMemo","check","selectionStatusAtom","mapSelection","departamentoDataAtom","createDepartamentoDataAtom","selectionStatus","useAtomValue","departamentoData","setMapSelection","useUpdateAtom","fillColor","className","transform","style","strokeWidth","fill","onPointerEnter","onPointerLeave","getAnchor","p","formatNumber","x","toFixed","ColorLegend","mapSize","legendSize","legendMargins","orientation","ticks","tickHeight","textOffset","id","Math","round","random","domain","x0","x1","selectedData","selectedDataValue","selectedDataPerc","selectedDataX","width","gradientTransform","range","stop","i","offset","stopColor","left","height","top","y","bottom","opacity","x2","y1","y2","textAnchor","svgSize","right","maxColorVar","projection","geoMercator","fitSize","geoPath","scaleSequential","interpolator","interpolateBlues","viewBox","features","properties","format","DetailsView","props","selectionData","allData","showData","n","Btn","children","type","PlotSettings","useAtom","setColorVar","onClick","disabled","headers","DataTable","selectedDepartamento","setSelectedDepartamento","varIdx","Array","from","header","v","j","urls","DataSourcesInfo","open","Button","Panel","url","href","target","rel","App","fallback","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88051ca9.chunk.js","sourcesContent":["import { atom } from \"jotai\";\nimport { csv, json, rollups, descending, sum, max } from \"d3\";\nimport { feature } from \"topojson-client\";\nimport { TData, TPopulationData, TSummaryData } from \"../types\";\n\n/** Load population data */\nexport const populationDataAtom = atom(async () => {\n  const csvData = await csv(\n    \"poblacion_departamentos.csv\",\n    (row: any) => ({ ...row, total: +row.total } as TPopulationData)\n  );\n  const data = new Map<string, number>();\n  let totalPopulation = 0;\n  csvData.forEach(({ departamento, total }) => {\n    totalPopulation += total;\n    data.set(departamento, total);\n  });\n  data.set(\"all\", totalPopulation);\n  return data;\n});\n\n/** Aggregates data to get counts */\nexport const getSummary = (data: TData[]) => {\n  const entries = rollups(\n    data,\n    (o) => o.length,\n    (o) => o.poder\n  ).sort((a, b) => descending(a[1], b[1]));\n  return {\n    entries,\n    total: sum(entries.map((o) => o[1])),\n    max: max(entries.map((o) => o[1])) ?? 0,\n  };\n};\n\n/** Load raw data */\nexport const dataAtom = atom(\n  async () => await csv(\"entidades.csv\", (row: any) => row as TData)\n);\n\nconst densityMul = 100_000;\n\n/**\n * Aggregated data as d3 map for each departamento\n * density is given per 100k persons\n */\nexport const dataSummaryAtom = atom((get) => {\n  const populationData = get(populationDataAtom);\n  const dataList = rollups(get(dataAtom), getSummary, (o) => o.departamento);\n  const data = new Map<string, TSummaryData>();\n  dataList.forEach(([departamento, d]) => {\n    const population = populationData.get(departamento) ?? 0;\n    return data.set(departamento, {\n      ...d,\n      population,\n      density: (d.total / population) * densityMul,\n    });\n  });\n  return data;\n});\n\n/**\n * Aggregated data for all the country\n * density is given per 100k persons\n */\nexport const dataSummaryAllAtom = atom<TSummaryData>((get) => {\n  const data = getSummary(get(dataAtom));\n  const population = get(populationDataAtom).get(\"all\") ?? 0;\n  return {\n    ...data,\n    population,\n    density: (data.total / population) * densityMul,\n  };\n});\n\n/** Get an atom with the aggregated data for a departamento */\nexport const createDepartamentoDataAtom = (departamento: string) =>\n  atom((get) => get(dataSummaryAtom).get(departamento));\n\n/** Load geojson data */\nexport const geodataAtom = atom(async () => {\n  const data = await json(\"departamentos.json\").then((topology) => {\n    const featureCollection = feature(topology as any, \"departamentos\");\n    return featureCollection as any as GeoJSON.FeatureCollection<\n      GeoJSON.Geometry,\n      { departamento: string }\n    >;\n  });\n  return data;\n});\n","import { atom } from \"jotai\";\nimport { dataSummaryAtom } from \"./data\";\n\n/** Name of selected departamento */\nexport const mapSelectionAtom = atom<string | null>(null);\n\n/** Creates atom to check status of an specific departamento */\nexport const createSelectionStatusAtom = (check: string) =>\n  atom((get) => {\n    const mapSelection = get(mapSelectionAtom);\n    return mapSelection === null\n      ? \"empty\"\n      : mapSelection === check\n      ? \"selected\"\n      : \"other\";\n  });\n\n/** Data for the current selected departamento */\nexport const selectedDataAtom = atom((get) => {\n  const selection = get(mapSelectionAtom);\n  if (selection === null) return null;\n  const data = get(dataSummaryAtom).get(selection);\n  return data === undefined ? null : { name: selection, ...data };\n});\n","import { atom } from \"jotai\";\nimport { max, map } from \"d3\";\nimport { ColorVar } from \"../types\";\nimport { dataSummaryAtom } from \"./data\";\n\n/** Variable to set the color scale */\nexport const colorVarAtom = atom<ColorVar>(\"density\");\n\n/** Get the max value for the color scale  */\nexport const maxColorVarAtom = atom((get) => {\n  const data = get(dataSummaryAtom);\n  const colorVar = get(colorVarAtom);\n  const maxCount = max(\n    map(data.values(), ({ total, density }) =>\n      colorVar === \"number\" ? total : density\n    )\n  );\n  return maxCount ?? 0;\n});\n","import React, { useMemo } from \"react\";\nimport { createSelectionStatusAtom, mapSelectionAtom } from \"../atoms/map\";\nimport { useAtomValue, useUpdateAtom } from \"jotai/utils\";\nimport { ScaleSequential } from \"d3\";\nimport { createDepartamentoDataAtom } from \"../atoms/data\";\nimport { colorVarAtom } from \"../atoms/plotSettings\";\n\ninterface Props {\n  departamento: string;\n  path: string;\n  scale: ScaleSequential<string>;\n}\n\nexport const Departamento: React.FC<Props> = ({\n  departamento,\n  path,\n  scale,\n}) => {\n  const { selectionStatusAtom, departamentoDataAtom } = useMemo(() => {\n    const selectionStatusAtom = createSelectionStatusAtom(departamento);\n    const departamentoDataAtom = createDepartamentoDataAtom(departamento);\n    return { selectionStatusAtom, departamentoDataAtom };\n  }, [departamento]);\n  const selectionStatus = useAtomValue(selectionStatusAtom);\n  const departamentoData = useAtomValue(departamentoDataAtom);\n  const setMapSelection = useUpdateAtom(mapSelectionAtom);\n  const colorVar = useAtomValue(colorVarAtom);\n  const fillColor = scale(\n    departamentoData === undefined\n      ? 0\n      : colorVar === \"number\"\n      ? departamentoData.total\n      : departamentoData.density\n  );\n\n  return (\n    <path\n      className={`land ${\n        selectionStatus === \"selected\"\n          ? \"selected-land\"\n          : selectionStatus === \"other\"\n          ? \"grayscale opacity-50\"\n          : \"\"\n      }`}\n      transform={\n        departamento === \"Callao\" ? \"scale(4),translate(-140,-384)\" : \"\"\n      }\n      style={departamento === \"Callao\" ? { strokeWidth: 0.3 } : {}}\n      fill={fillColor}\n      d={path}\n      onPointerEnter={() => setMapSelection(departamento)}\n      onPointerLeave={() => setMapSelection(null)}\n    />\n  );\n};\n","import React, { useMemo } from \"react\";\nimport { range, ScaleSequential } from \"d3\";\nimport { useAtomValue } from \"jotai/utils\";\nimport { ColorVar, Margins, Size } from \"../types\";\nimport { selectedDataAtom } from \"../atoms/map\";\nimport { colorVarAtom } from \"../atoms/plotSettings\";\n\ninterface Props {\n  mapSize: Size;\n  legendSize: Size;\n  legendMargins: Margins;\n  scale: ScaleSequential<string>;\n  orientation?: \"horizontal\" | \"vertical\";\n  ticks?: number;\n  tickHeight?: number;\n  textOffset?: number;\n}\n\nconst getAnchor = (p: number) => (p < 20 ? \"start\" : p > 80 ? \"end\" : \"middle\");\nconst formatNumber = (x: number, colorVar: ColorVar) =>\n  colorVar === \"number\" ? x : x.toFixed(1);\n\nexport const ColorLegend: React.FC<Props> = ({\n  mapSize,\n  legendSize,\n  legendMargins,\n  scale,\n  orientation = \"horizontal\",\n  ticks = 0,\n  tickHeight = 8,\n  textOffset = 15,\n}) => {\n  const id = useMemo(\n    () => `colorLegendGradient${Math.round(Math.random() * 10000)}`,\n    []\n  );\n  const [x0, x1] = scale.domain();\n  const selectedData = useAtomValue(selectedDataAtom);\n  const colorVar = useAtomValue(colorVarAtom);\n  const selectedDataValue =\n    selectedData === null\n      ? 0\n      : colorVar === \"number\"\n      ? selectedData.total\n      : selectedData.density;\n  const selectedDataPerc = ((selectedDataValue - x0) / x1) * 100;\n  const selectedDataX = (selectedDataPerc * legendSize.width) / 100;\n\n  return (\n    <g>\n      <linearGradient\n        id={id}\n        gradientTransform={`rotate(${orientation === \"horizontal\" ? 0 : 90})`}\n      >\n        {\n          // 11 stops are enough to show a legend\n          range(0, 100.01, 20).map((stop, i) => (\n            <stop\n              key={i}\n              offset={`${stop}%`}\n              stopColor={scale((x0 + stop * (x1 - x0)) / 100)}\n            />\n          ))\n        }\n      </linearGradient>\n\n      <g\n        transform={`translate(${legendMargins.left},${\n          mapSize.height + legendMargins.top\n        })`}\n      >\n        <text\n          x={2}\n          y={-7}\n          className=\"text-lg tracking-wide text-gray-800 fill-current font-semibold\"\n        >\n          {colorVar === \"number\"\n            ? \"Nro de entidades\"\n            : \"Nro de entidades por 100mil habitantes\"}\n        </text>\n        <rect\n          width={legendSize.width}\n          height={legendSize.height}\n          fill={`url(#${id})`}\n          className=\"text-gray-800 stroke-current\"\n        />\n        <g\n          transform={`translate(0, ${\n            legendSize.height + legendMargins.bottom\n          })`}\n        >\n          {\n            //Ticks\n            range(0, 100.01, 100 / (1 + ticks)).map((stop, i) => {\n              const x = (stop * legendSize.width) / 100;\n              return (\n                <g key={i} opacity={selectedData === null ? 1.0 : 0.2}>\n                  <line\n                    x1={x}\n                    x2={x}\n                    y1={0}\n                    y2={tickHeight}\n                    className=\"text-gray-800 stroke-current\"\n                  />\n                  <text\n                    x={x}\n                    y={tickHeight + textOffset}\n                    textAnchor={getAnchor(stop)}\n                    className=\"text-sm text-gray-800 font-semibold fill-current\"\n                  >\n                    {formatNumber(x0 + (stop / 100) * (x1 - x0), colorVar)}\n                  </text>\n                </g>\n              );\n            })\n          }\n          {/* Selected tick */}\n          <g\n            opacity={selectedData === null ? 0 : 1}\n            className=\"transition-opacity\"\n          >\n            <line\n              transform={`translate(${selectedDataX},${0})`}\n              y1={0}\n              y2={tickHeight}\n              className=\"text-gray-800 stroke-current transition-transform\"\n            />\n            <text\n              transform={`translate(${selectedDataX},${0})`}\n              y={tickHeight + textOffset}\n              textAnchor={getAnchor(selectedDataPerc)}\n              className=\"text-gray-800 fill-current font-semibold transition-transform\"\n            >\n              {selectedData !== null\n                ? `${selectedData.name} (${formatNumber(\n                    selectedDataValue,\n                    colorVar\n                  )})`\n                : \"\"}\n            </text>\n          </g>\n        </g>\n      </g>\n    </g>\n  );\n};\n","import React, { useMemo } from \"react\";\nimport { useAtomValue } from \"jotai/utils\";\nimport { geoMercator, geoPath, scaleSequential, interpolateBlues } from \"d3\";\nimport { geodataAtom } from \"../atoms/data\";\nimport { Departamento } from \"./Departamento\";\nimport { Margins, Size } from \"../types\";\nimport { ColorLegend } from \"./ColorLegend\";\nimport { maxColorVarAtom } from \"../atoms/plotSettings\";\nimport \"./Map.css\";\n\nconst mapSize: Size = { width: 540, height: 800 };\nconst svgSize: Size = { width: mapSize.width, height: mapSize.height + 75 };\nconst legendMargins: Margins = {\n  left: 20,\n  right: 20,\n  top: 10,\n  bottom: 0,\n};\nconst legendSize: Size = {\n  width: svgSize.width - legendMargins.left - legendMargins.right,\n  height: 30,\n};\n\nexport const Map: React.FC = () => {\n  const data = useAtomValue(geodataAtom);\n  const maxColorVar = useAtomValue(maxColorVarAtom);\n  const path = useMemo(() => {\n    const projection = geoMercator().fitSize(\n      [mapSize.width, mapSize.height],\n      data\n    );\n    return geoPath(projection);\n  }, [data]);\n  const scale = useMemo(\n    () =>\n      scaleSequential().domain([0, maxColorVar]).interpolator(interpolateBlues),\n    [maxColorVar]\n  );\n\n  return (\n    <svg\n      className=\"max-w-[400px] max-h-[650px]\"\n      viewBox={`0 0 ${svgSize.width} ${svgSize.height}`}\n    >\n      {data.features.map((feature, i) => (\n        <Departamento\n          key={i}\n          departamento={feature.properties.departamento}\n          path={path(feature) as string}\n          scale={scale}\n        />\n      ))}\n      <ColorLegend\n        mapSize={mapSize}\n        legendSize={legendSize}\n        legendMargins={legendMargins}\n        scale={scale}\n      />\n    </svg>\n  );\n};\n","import React, { HTMLProps } from \"react\";\nimport { useAtomValue } from \"jotai/utils\";\nimport { format } from \"d3\";\nimport { dataSummaryAllAtom } from \"../atoms/data\";\nimport { mapSelectionAtom, selectedDataAtom } from \"../atoms/map\";\n\nconst formatNumber = format(\",\");\n\nexport const DetailsView: React.FC<HTMLProps<HTMLDivElement>> = ({\n  ...props\n}) => {\n  const mapSelection = useAtomValue(mapSelectionAtom);\n  const selectionData = useAtomValue(selectedDataAtom);\n  const allData = useAtomValue(dataSummaryAllAtom);\n  const showData = selectionData ?? allData;\n\n  return (\n    <div {...props}>\n      <p className=\"text-2xl font-semibold\">\n        {mapSelection ?? \"Perú\"}: {formatNumber(showData.total)} entidades\n      </p>\n      <p className=\"text-sm tracking-wide font-semibold text-gray-500\">\n        {showData.density.toFixed(1)} entidades por cada 100mil habitantes\n      </p>\n      <div className=\"mt-3 w-full flex flex-col space-y-2\">\n        {showData.entries.map(([poder, n], i) => (\n          <div key={i}>\n            <p className=\"text-sm text-gray-800 font-medium tracking-wide\">\n              {poder} ({n})\n            </p>\n            <div\n              className=\"bg-blue-900 h-5\"\n              style={{ width: `${(100 * n) / showData.max}%` }}\n            />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n","import React, { HTMLProps } from \"react\";\nimport { useAtom } from \"jotai\";\nimport { colorVarAtom } from \"../atoms/plotSettings\";\n\nconst Btn: React.FC<HTMLProps<HTMLButtonElement>> = ({\n  className,\n  children,\n  type,\n  ...props\n}) => (\n  <button\n    className=\"px-2 py-2 bg-blue-400 disabled:bg-blue-500 hover:bg-blue-600 active:bg-blue-800 shadow rounded text-white tracking-wide focus:outline-none focus:ring disabled:ring-4 disabled:ring-blue-800 transition\"\n    {...props}\n  >\n    {children}\n  </button>\n);\n\nexport const PlotSettings: React.FC<HTMLProps<HTMLDivElement>> = (props) => {\n  const [colorVar, setColorVar] = useAtom(colorVarAtom);\n\n  return (\n    <div {...props}>\n      <div className=\"flex flex-col space-y-2\">\n        <Btn\n          onClick={() => setColorVar(\"number\")}\n          disabled={colorVar === \"number\"}\n        >\n          Visualizar por número de entidades\n        </Btn>\n        <Btn\n          onClick={() => setColorVar(\"density\")}\n          disabled={colorVar === \"density\"}\n        >\n          <p>Visualizar por densidad</p>\n          (entidades por cada 100mil habitantes)\n        </Btn>\n      </div>\n    </div>\n  );\n};\n","import React, { HTMLProps } from \"react\";\nimport { useAtom } from \"jotai\";\nimport { useAtomValue } from \"jotai/utils\";\nimport { format, descending } from \"d3\";\nimport { dataSummaryAtom } from \"../atoms/data\";\nimport { colorVarAtom } from \"../atoms/plotSettings\";\nimport { mapSelectionAtom } from \"../atoms/map\";\n\nconst headers = [\n  \"Departamento\",\n  \"Habitantes\",\n  \"#Entidades\",\n  \"#Entidades por\\n100mil habitantes\",\n];\n\nconst formatNumber = format(\",\");\n\nexport const DataTable: React.FC<HTMLProps<HTMLDivElement>> = (props) => {\n  const [selectedDepartamento, setSelectedDepartamento] =\n    useAtom(mapSelectionAtom);\n  const colorVar = useAtomValue(colorVarAtom);\n  const varIdx = colorVar === \"number\" ? 2 : 3;\n  const data = Array.from(useAtomValue(dataSummaryAtom))\n    .map(([departamento, { population, total, density }]) => [\n      departamento,\n      population,\n      total,\n      density,\n    ])\n    .sort((a, b) => descending(a[varIdx], b[varIdx]));\n\n  return (\n    <div {...props}>\n      <table className=\"table-auto border border-blue-100\">\n        <thead>\n          <tr>\n            {headers.map((header, i) => (\n              <th\n                key={i}\n                className={`px-3 py-2 bg-blue-500 text-white font-medium tracking-wide whitespace-pre-line ${\n                  i === 0\n                    ? \"rounded-tl-lg\"\n                    : i === headers.length - 1\n                    ? \"rounded-tr-lg\"\n                    : \"\"\n                }`}\n              >\n                {header}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody>\n          {data.map((row, i) => (\n            <tr\n              key={i}\n              className={`${\n                row[0] === selectedDepartamento\n                  ? \"bg-blue-900 text-white\"\n                  : i % 2 === 0\n                  ? \"bg-blue-100\"\n                  : \"bg-gray-50\"\n              } cursor-default`}\n              onPointerEnter={() => setSelectedDepartamento(row[0] as string)}\n              onPointerLeave={() => setSelectedDepartamento(null)}\n            >\n              {row.map((v, j) => (\n                <td\n                  key={j}\n                  className={`px-3 py-1.5 ${\n                    j === 0 ? \"text-left\" : \"text-right\"\n                  }`}\n                >\n                  {j === 1\n                    ? formatNumber(v as number)\n                    : j === 3\n                    ? (v as number).toFixed(2)\n                    : v}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n","import React, { HTMLProps } from \"react\";\nimport { Disclosure } from \"@headlessui/react\";\nimport { ChevronUpIcon } from \"@heroicons/react/solid\";\n\nconst urls = [\n  [\n    \"Lista de entidades\",\n    \"https://www.datosabiertos.gob.pe/dataset/lista-de-entidades-del-estado-peruano\",\n  ],\n  [\n    \"Población\",\n    \"https://cloud.minsa.gob.pe/apps/onlyoffice/s/XJ3NoG3WsxgF6H8?fileId=613439\",\n  ],\n  [\n    \"Shapefiles\",\n    \"https://www.geogpsperu.com/2014/03/base-de-datos-peru-shapefile-shp-minam.html\",\n  ],\n];\n\nexport const DataSourcesInfo: React.FC<HTMLProps<HTMLDivElement>> = (props) => {\n  return (\n    <div {...props}>\n      <Disclosure>\n        {({ open }) => (\n          <>\n            <Disclosure.Button className=\"self-end flex hover:underline focus:outline-none focus-visible:outline-none focus-visible:ring focus-visible:ring-blue-500 focus-visible:ring-opacity-50\">\n              <span>Ver información acerca de las fuentes de datos</span>\n              <ChevronUpIcon\n                className={`${\n                  open ? \"rotate-180\" : \"\"\n                } ml-1 mt-1 w-4 h-4 transition-transform`}\n              />\n            </Disclosure.Button>\n            <Disclosure.Panel className=\"mt-1 mb-0.5 pl-6 pr-2 py-2.5 bg-gray-200 ring-2 ring-gray-300 rounded-lg shadow\">\n              <ul className=\"list-decimal space-y-2 break-all\">\n                {urls.map(([name, url], i) => (\n                  <li key={i}>\n                    {name}:{\" \"}\n                    <a href={url} target=\"_black\" rel=\"noopener\">\n                      {url}\n                    </a>\n                  </li>\n                ))}\n              </ul>\n            </Disclosure.Panel>\n          </>\n        )}\n      </Disclosure>\n    </div>\n  );\n};\n","import React, { Suspense } from \"react\";\nimport { Provider } from \"jotai\";\nimport { Map } from \"./components/Map\";\nimport { DetailsView } from \"./components/DetailsView\";\nimport { PlotSettings } from \"./components/PlotSettings\";\nimport { DataTable } from \"./components/DataTable\";\nimport { DataSourcesInfo } from \"./components/DataSourcesInfo\";\n\nexport const App = () => {\n  return (\n    <Provider>\n      <div className=\"container mx-auto mt-4\">\n        <h1 className=\"text-center text-4xl font-semibold\">\n          Entidades del estado peruano\n        </h1>\n        <Suspense fallback={<p>Loading...</p>}>\n          <div className=\"mt-8 p-2 flex flex-col\">\n            <div className=\"flex flex-wrap justify-evenly\">\n              <Map />\n              <div className=\"mt-1 flex-1 flex flex-wrap flex-col max-w-[300px] min-w-[200px]\">\n                <PlotSettings />\n                <DetailsView className=\"mt-6\" />\n              </div>\n              <div className=\"flex flex-col\">\n                <DataSourcesInfo className=\"flex flex-col w-full max-w-md\" />\n                <DataTable />\n              </div>\n            </div>\n          </div>\n        </Suspense>\n      </div>\n    </Provider>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}